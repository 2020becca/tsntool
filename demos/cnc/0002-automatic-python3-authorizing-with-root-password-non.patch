From 01a091076743d7701e551409d8eb3a36c3fd0c5f Mon Sep 17 00:00:00 2001
From: Po Liu <Po.Liu@nxp.com>
Date: Wed, 21 Aug 2019 14:46:08 +0800
Subject: [PATCH 2/2] automatic python3 authorizing with root password none

Signed-off-by: Po Liu <Po.Liu@nxp.com>
---
 python/session.c | 167 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 167 insertions(+)

diff --git a/python/session.c b/python/session.c
index 32df523..baa0b18 100644
--- a/python/session.c
+++ b/python/session.c
@@ -2,6 +2,9 @@
 #include <structmember.h>
 
 #include <libnetconf.h>
+#include <libnetconf_ssh.h>
+#include <errno.h>
+#include <termios.h>
 
 #include "netconf.h"
 
@@ -21,6 +24,165 @@ static PyMemberDef ncSessionMembers[] = {
 
 #define SESSION_CHECK(self) if(!(self->session)){PyErr_SetString(libnetconfError,"Session closed.");return NULL;}
 
+static int callback_ssh_hostkey_check_python(const char* hostname, ssh_session session)
+{
+	char* hexa;
+	int c, state, ret;
+	ssh_key srv_pubkey;
+	unsigned char *hash_sha1 = NULL;
+	size_t hlen;
+	enum ssh_keytypes_e srv_pubkey_type;
+	char answer[5];
+
+	state = ssh_is_server_known(session);
+
+	ret = ssh_get_publickey(session, &srv_pubkey);
+	if (ret < 0) {
+		PySys_WriteStdout("Unable to get server public key.");
+		return EXIT_FAILURE;
+	}
+
+	srv_pubkey_type = ssh_key_type(srv_pubkey);
+	ret = ssh_get_publickey_hash(srv_pubkey, SSH_PUBLICKEY_HASH_SHA1, &hash_sha1, &hlen);
+	ssh_key_free(srv_pubkey);
+	if (ret < 0) {
+		PySys_WriteStdout("Failed to calculate SHA1 hash of the server public key.");
+		return EXIT_FAILURE;
+	}
+
+	hexa = ssh_get_hexa(hash_sha1, hlen);
+
+	switch (state) {
+	case SSH_SERVER_KNOWN_OK:
+		break; /* ok */
+
+	case SSH_SERVER_KNOWN_CHANGED:
+		PySys_WriteStdout("Remote host key changed, the connection will be terminated!");
+		goto fail;
+
+	case SSH_SERVER_FOUND_OTHER:
+		PySys_WriteStdout("The iemote host key was not found but another type of key was, the connection will be terminated.");
+		goto fail;
+
+	case SSH_SERVER_FILE_NOT_FOUND:
+		PySys_WriteStdout("Could not find the known hosts file.");
+		/* fallback to SSH_SERVER_NOT_KNOWN behavior */
+
+	case SSH_SERVER_NOT_KNOWN:
+#ifdef ENABLE_DNSSEC
+		if (srv_pubkey_type != SSH_KEYTYPE_UNKNOWN || srv_pubkey_type != SSH_KEYTYPE_RSA1) {
+			if (srv_pubkey_type == SSH_KEYTYPE_DSS) {
+				ret = callback_ssh_hostkey_hash_dnssec_check(hostname, hash_sha1, 2, 1);
+			} else if (srv_pubkey_type == SSH_KEYTYPE_RSA) {
+				ret = callback_ssh_hostkey_hash_dnssec_check(hostname, hash_sha1, 1, 1);
+			} else if (srv_pubkey_type == SSH_KEYTYPE_ECDSA) {
+				ret = callback_ssh_hostkey_hash_dnssec_check(hostname, hash_sha1, 3, 1);
+			}
+
+			/* DNSSEC SSHFP check successful, that's enough */
+			if (ret == 0) {
+				DBG("DNSSEC SSHFP check successful");
+				ssh_write_knownhost(session);
+				ssh_clean_pubkey_hash(&hash_sha1);
+				ssh_string_free_char(hexa);
+				return EXIT_SUCCESS;
+			}
+		}
+#endif
+
+		/* try to get result from user */
+		fprintf(stdout, "The authenticity of the host \'%s\' cannot be established.\n", hostname);
+		fprintf(stdout, "%s key fingerprint is %s.\n", ssh_key_type_to_char(srv_pubkey_type), hexa);
+
+#ifdef ENABLE_DNSSEC
+		if (ret == 2) {
+			fprintf(stdout, "No matching host key fingerprint found in DNS.\n");
+		} else if (ret == 1) {
+			fprintf(stdout, "Matching host key fingerprint found in DNS.\n");
+		}
+#endif
+
+		fprintf(stdout, "Are you sure you want to continue connecting (yes/no)? yes\n ");
+
+		ret = ssh_write_knownhost(session);
+		if (ret < 0) {
+			PySys_WriteStdout("Adding the known host %s failed (%s).", hostname, strerror(errno));
+		}
+		break;
+
+	case SSH_SERVER_ERROR:
+		ssh_clean_pubkey_hash(&hash_sha1);
+		fprintf(stderr,"%s",ssh_get_error(session));
+		return -1;
+	}
+
+	ssh_clean_pubkey_hash(&hash_sha1);
+	ssh_string_free_char(hexa);
+	return EXIT_SUCCESS;
+
+fail:
+	ssh_clean_pubkey_hash(&hash_sha1);
+	ssh_string_free_char(hexa);
+	return EXIT_FAILURE;
+}
+
+static char* callback_sshauth_password_python(const char* username,
+		const char* hostname)
+{
+	char* buf, *newbuf;
+	int buflen = 1024, len = 0;
+	char c = 0;
+	struct termios newterm, oldterm;
+	FILE* tty;
+
+	buf = malloc (buflen * sizeof(char));
+	if (buf == NULL) {
+		printf("Memory allocation failed (%s:%d - %s).", __FILE__, __LINE__, strerror(errno));
+		return (NULL);
+	}
+
+	if ((tty = fopen("/dev/tty", "r+")) == NULL) {
+		printf("Unable to open the current terminal (%s:%d - %s).", __FILE__, __LINE__, strerror(errno));
+		return (NULL);
+	}
+
+	if (tcgetattr(fileno(tty), &oldterm) != 0) {
+		printf("Unable to get terminal settings (%d: %s).", __LINE__, strerror(errno));
+		return (NULL);
+	}
+
+	fprintf(tty, "%s@%s password: ", username, hostname);
+	fflush(tty);
+
+	/* system("stty -echo"); */
+	newterm = oldterm;
+	newterm.c_lflag &= ~ECHO;
+	newterm.c_lflag &= ~ICANON;
+	tcflush(fileno(tty), TCIFLUSH);
+	if (tcsetattr(fileno(tty), TCSANOW, &newterm) != 0) {
+		printf("Unable to change terminal settings for hiding password (%d: %s).", __LINE__, strerror(errno));
+		return (NULL);
+	}
+
+	//buf[0] = '\r';
+	buf[0] = 0; /* terminating null byte */
+
+	/* system ("stty echo"); */
+	if (tcsetattr(fileno(tty), TCSANOW, &oldterm) != 0) {
+		printf("Unable to restore terminal settings (%d: %s).", __LINE__, strerror(errno));
+		/*
+		 * terminal probably still hides input characters, but we have password
+		 * and anyway we are unable to set terminal to the previous state, so
+		 * just continue
+		 */
+	}
+	fprintf(tty, "\n");
+
+	PySys_WriteStdout("alreayd input password\r\n");
+	fclose(tty);
+	return (buf);
+}
+
 static void ncSessionFree(ncSessionObject *self)
 {
 	PyObject *err_type, *err_value, *err_traceback;
@@ -694,6 +856,11 @@ static int ncSessionInit(ncSessionObject *self, PyObject *args, PyObject *keywor
 		cpblts = global_cpblts;
 	}
 
+	//nc_set_keypair_path("~/.ssh/id_rsa","~/.ssh/id_rsa.pub");
+	nc_ssh_pref(NC_SSH_AUTH_INTERACTIVE, -1);
+	nc_callback_sshauth_password(callback_sshauth_password_python);
+	nc_callback_ssh_host_authenticity_check(callback_ssh_hostkey_check_python);
+
 	if (host != NULL) {
 		/* Client side */
 		if (fd_in != -1 && fd_out != -1) {
-- 
1.8.3.1

